# vim: set sts=2 ts=8 sw=2 tw=99 et ft=python: 
import os

for sdk_target in MMSPlugin.sdk_targets:
  sdk = sdk_target.sdk
  cxx = sdk_target.cxx

  binary = MMSPlugin.HL2Library(builder, cxx, f'{MMSPlugin.metadata["name"]}.{sdk["name"]}', sdk)

  binary.compiler.cxxincludes += [
        os.path.join(builder.sourcePath, 'src', 'include'),
        os.path.join(builder.sourcePath, 'src', 'include', 'SchemaEntity'),     
        os.path.join(builder.currentSourcePath, 'include'),
	os.path.join(builder.currentSourcePath, 'include', 'menus'),   
	os.path.join(builder.sourcePath, 'src', 'include', 'funchook', 'include' ),                  
  ]

  if binary.compiler.target.platform == 'windows':
    binary.compiler.postlink += [
      os.path.join('psapi.lib'),
      os.path.join(builder.sourcePath, 'src', 'include', 'funchook', 'lib', 'funchook.lib'),
      os.path.join(builder.sourcePath, 'src', 'include', 'funchook', 'lib', 'distorm.lib'),
    ]

  binary.sources += [
        os.path.join('src', 'impl', 'plugin.cpp'),
        os.path.join('src', 'impl', 'ctx.cpp'),
        os.path.join('src', 'include', 'SchemaEntity', 'schemasystem.cpp'),
	os.path.join('src', 'include', 'SchemaEntity', 'module.cpp'),
        os.path.join('src', 'include', 'SchemaEntity', 'ctimer.cpp')
   ] 

  binary.custom = [builder.tools.Protoc(protoc = sdk_target.protoc, sources = [
    os.path.join(sdk['path'], 'game', 'shared', 'usermessages.proto'),
    os.path.join(sdk['path'], 'common', 'network_connection.proto'),
    os.path.join(sdk['path'], 'common', 'networkbasetypes.proto'),
    os.path.join(sdk['path'], 'common', 'engine_gcmessages.proto'),
    os.path.join(sdk['path'], 'game', 'shared', 'usercmd.proto'),
    os.path.join(sdk['path'], 'game', 'shared', 'gameevents.proto'),
  ])]

  nodes = builder.Add(binary)
  MMSPlugin.binaries += [nodes]
